-- =======================================================================
-- SCRIPT MAESTRO NVDPA v2.1 (FINAL) PARA ORACLE
-- =======================================================================
-- Este script crea la estructura completa y la puebla con datos iniciales.
-- =======================================================================

-- Parte 1: Borrado Seguro de Tablas Existentes
BEGIN
   FOR c IN (SELECT table_name FROM user_tables) LOOP
      EXECUTE IMMEDIATE 'DROP TABLE "' || c.table_name || '" CASCADE CONSTRAINTS';
   END LOOP;
   DBMS_OUTPUT.PUT_LINE('Tablas anteriores eliminadas exitosamente.');
END;
/

-- =======================================================================
-- Parte 2: Creación de Tablas de Catálogo
-- =======================================================================
CREATE TABLE PAIS ( ID_PAIS NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, PAIS VARCHAR2(100) NOT NULL UNIQUE );
CREATE TABLE TIPO_BARCO ( ID_TIPO_BARCO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TIPO_BARCO VARCHAR2(100) NOT NULL UNIQUE );
CREATE TABLE CATEGORIA_SERVICIO ( ID_CATEGORIA_SERVICIO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, CATEGORIA VARCHAR2(100) NOT NULL UNIQUE );
CREATE TABLE TIPO_MONEDA ( ID_MONEDA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_MONEDA VARCHAR2(50) NOT NULL UNIQUE, CODIGO_ISO VARCHAR2(3) NOT NULL UNIQUE );
CREATE TABLE METODO_PAGO ( ID_METODO_PAGO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_METODO VARCHAR2(100) NOT NULL UNIQUE );
CREATE TABLE ROLES ( ID_ROL NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_ROL VARCHAR2(50) NOT NULL UNIQUE );
CREATE TABLE DEPARTAMENTO ( ID_DEPARTAMENTO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_DEPARTAMENTO VARCHAR2(100) NOT NULL UNIQUE );
CREATE TABLE CARGO ( ID_CARGO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_CARGO VARCHAR2(100) NOT NULL UNIQUE, ID_DEPARTAMENTO NUMBER );
CREATE TABLE ESTADO_PETICION ( ID_ESTADO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ESTADO VARCHAR2(50) NOT NULL UNIQUE );
CREATE TABLE TIPO_CONTENEDOR ( ID_TIPO_CONTENEDOR NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPCION_TIPO VARCHAR2(100) NOT NULL UNIQUE );
CREATE TABLE TIPO_DOCUMENTO ( ID_TIPO_DOCUMENTO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TIPO_DOCUMENTO VARCHAR2(100) NOT NULL UNIQUE );

-- =======================================================================
-- Parte 3: Creación de Tablas de Entidades Principales
-- =======================================================================
CREATE TABLE CLIENTE ( ID_CLIENTE NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_CLIENTE VARCHAR2(150) NOT NULL UNIQUE, RUC_CLIENTE VARCHAR2(20) UNIQUE, DIRECCION VARCHAR2(255), CONTACTO_PRINCIPAL VARCHAR2(100) );
CREATE TABLE PROVEEDOR ( ID_PROVEEDOR NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_EMPRESA VARCHAR2(150) NOT NULL UNIQUE, RUC_PROVEEDOR VARCHAR2(20) UNIQUE, CONTACTO VARCHAR2(100) );
CREATE TABLE PUERTO ( ID_PUERTO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_PUERTO VARCHAR2(100) NOT NULL UNIQUE, CIUDAD VARCHAR2(100), ID_PAIS NUMBER, LATITUD NUMBER, LONGITUD NUMBER );
CREATE TABLE BARCO ( ID_BARCO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_BARCO VARCHAR2(100) NOT NULL, NUMERO_IMO VARCHAR2(7) NOT NULL UNIQUE, ID_TIPO_BARCO NUMBER, ID_PAIS_BANDERA NUMBER, ID_CLIENTE NUMBER );
CREATE TABLE SERVICIO ( ID_SERVICIO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_SERVICIO VARCHAR2(100) NOT NULL UNIQUE, DESCRIPCION VARCHAR2(500), ID_CATEGORIA_SERVICIO NUMBER );
CREATE TABLE USUARIOS ( ID_USUARIO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_USUARIO VARCHAR2(100) NOT NULL UNIQUE, PASSWORD_HASH VARCHAR2(60) NOT NULL, ID_ROL NUMBER NOT NULL );
CREATE TABLE EMPLEADO ( ID_EMPLEADO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE VARCHAR2(100) NOT NULL, APELLIDO VARCHAR2(100) NOT NULL, CEDULA VARCHAR2(20) NOT NULL UNIQUE, ID_USUARIO NUMBER UNIQUE, ID_CARGO NUMBER );
CREATE TABLE TRIPULACION ( ID_TRIPULACION NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NOMBRE_COMPLETO VARCHAR2(150) NOT NULL, ROL_ABORDO VARCHAR2(50), PASAPORTE VARCHAR2(50) NOT NULL UNIQUE, ID_PAIS_NACIONALIDAD NUMBER, ID_BARCO NUMBER );

-- =======================================================================
-- Parte 4: Creación de Tablas Transaccionales y de Relación
-- =======================================================================
CREATE TABLE ESCALA_PORTUARIA ( ID_ESCALA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_BARCO NUMBER NOT NULL, ID_PUERTO NUMBER NOT NULL, FECHA_LLEGADA TIMESTAMP, FECHA_SALIDA TIMESTAMP, MUELLE VARCHAR2(20) );
CREATE TABLE CARGA ( ID_CARGA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_ESCALA NUMBER NOT NULL, DESCRIPCION_CARGA VARCHAR2(255) );
CREATE TABLE CONTENEDOR ( ID_CONTENEDOR NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_CARGA NUMBER NOT NULL, NUMERO_CONTENEDOR VARCHAR2(50) NOT NULL UNIQUE, ID_TIPO_CONTENEDOR NUMBER, PESO_NETO NUMBER(10,3) );
CREATE TABLE PETICION_SERVICIO( ID_PETICION NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_ESCALA NUMBER NOT NULL, ID_SERVICIO NUMBER NOT NULL, ID_USUARIO_CAPITAN NUMBER NOT NULL, ID_ESTADO NUMBER NOT NULL, FECHA_PETICION DATE DEFAULT SYSDATE, NOTAS_CAPITAN VARCHAR2(500) );
CREATE TABLE FACTURA ( ID_FACTURA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_ESCALA NUMBER NOT NULL, ID_CLIENTE NUMBER NOT NULL, NUMERO_FACTURA VARCHAR2(50) NOT NULL UNIQUE, FECHA_EMISION DATE DEFAULT SYSDATE, FECHA_VENCIMIENTO DATE, MONTO_TOTAL NUMBER(12,2) DEFAULT 0, ID_MONEDA NUMBER, ESTADO_FACTURA VARCHAR2(20) DEFAULT 'Borrador' );
CREATE TABLE TARIFA_SERVICIO ( ID_TARIFA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_SERVICIO NUMBER NOT NULL, ID_PROVEEDOR NUMBER NOT NULL, PRECIO_ESTANDAR NUMBER(12,2) NOT NULL, ID_MONEDA NUMBER NOT NULL );
CREATE TABLE SERVICIO_ESCALA ( ID_SERVICIO_ESCALA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_ESCALA NUMBER NOT NULL, ID_TARIFA NUMBER NOT NULL, COSTO_FINAL NUMBER(12, 2), NOTAS VARCHAR2(500) );
CREATE TABLE DETALLE_FACTURA ( ID_DETALLE_FACTURA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_FACTURA NUMBER NOT NULL, ID_SERVICIO_ESCALA NUMBER, DESCRIPCION VARCHAR2(255), PRECIO_UNITARIO NUMBER(12,2), CANTIDAD NUMBER DEFAULT 1, SUBTOTAL NUMBER(12,2) );
CREATE TABLE PAGO ( ID_PAGO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_FACTURA NUMBER NOT NULL, FECHA_PAGO DATE DEFAULT SYSDATE, MONTO_PAGADO NUMBER(12,2), ID_METODO_PAGO NUMBER, REFERENCIA_PAGO VARCHAR2(100) );
CREATE TABLE DOCUMENTO ( ID_DOCUMENTO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_ESCALA NUMBER NOT NULL, ID_TIPO_DOCUMENTO NUMBER NOT NULL, NOMBRE_ARCHIVO VARCHAR2(255), RUTA_ARCHIVO VARCHAR2(500), FECHA_SUBIDA DATE DEFAULT SYSDATE );
CREATE TABLE PROVEEDOR_SERVICIO ( ID_PROV_SERV NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_PROVEEDOR NUMBER NOT NULL, ID_SERVICIO NUMBER NOT NULL, UNIQUE (ID_PROVEEDOR, ID_SERVICIO) );
CREATE TABLE EMPLEADO_CLIENTE ( ID_EMP_CLI NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ID_EMPLEADO NUMBER NOT NULL, ID_CLIENTE NUMBER NOT NULL, UNIQUE (ID_EMPLEADO, ID_CLIENTE) );

-- =======================================================================
-- Parte 5: Creación de Llaves Foráneas (Constraints)
-- =======================================================================
ALTER TABLE CARGO ADD CONSTRAINT fk_cargo_depto FOREIGN KEY (ID_DEPARTAMENTO) REFERENCES DEPARTAMENTO(ID_DEPARTAMENTO);
ALTER TABLE PUERTO ADD CONSTRAINT fk_puerto_pais FOREIGN KEY (ID_PAIS) REFERENCES PAIS(ID_PAIS);
ALTER TABLE BARCO ADD CONSTRAINT fk_barco_tipobarco FOREIGN KEY (ID_TIPO_BARCO) REFERENCES TIPO_BARCO(ID_TIPO_BARCO);
ALTER TABLE BARCO ADD CONSTRAINT fk_barco_paisbandera FOREIGN KEY (ID_PAIS_BANDERA) REFERENCES PAIS(ID_PAIS);
ALTER TABLE BARCO ADD CONSTRAINT fk_barco_cliente FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE);
ALTER TABLE SERVICIO ADD CONSTRAINT fk_servicio_categoria FOREIGN KEY (ID_CATEGORIA_SERVICIO) REFERENCES CATEGORIA_SERVICIO(ID_CATEGORIA_SERVICIO);
ALTER TABLE TARIFA_SERVICIO ADD CONSTRAINT fk_tarifa_servicio FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIO(ID_SERVICIO);
ALTER TABLE TARIFA_SERVICIO ADD CONSTRAINT fk_tarifa_proveedor FOREIGN KEY (ID_PROVEEDOR) REFERENCES PROVEEDOR(ID_PROVEEDOR);
ALTER TABLE TARIFA_SERVICIO ADD CONSTRAINT fk_tarifa_moneda FOREIGN KEY (ID_MONEDA) REFERENCES TIPO_MONEDA(ID_MONEDA);
ALTER TABLE USUARIOS ADD CONSTRAINT fk_usuarios_rol FOREIGN KEY (ID_ROL) REFERENCES ROLES(ID_ROL);
ALTER TABLE EMPLEADO ADD CONSTRAINT fk_empleado_usuario FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO);
ALTER TABLE EMPLEADO ADD CONSTRAINT fk_empleado_cargo FOREIGN KEY (ID_CARGO) REFERENCES CARGO(ID_CARGO);
ALTER TABLE TRIPULACION ADD CONSTRAINT fk_tripulacion_pais FOREIGN KEY (ID_PAIS_NACIONALIDAD) REFERENCES PAIS(ID_PAIS);
ALTER TABLE TRIPULACION ADD CONSTRAINT fk_tripulacion_barco FOREIGN KEY (ID_BARCO) REFERENCES BARCO(ID_BARCO);
ALTER TABLE ESCALA_PORTUARIA ADD CONSTRAINT fk_escala_barco FOREIGN KEY (ID_BARCO) REFERENCES BARCO(ID_BARCO);
ALTER TABLE ESCALA_PORTUARIA ADD CONSTRAINT fk_escala_puerto FOREIGN KEY (ID_PUERTO) REFERENCES PUERTO(ID_PUERTO);
ALTER TABLE CARGA ADD CONSTRAINT fk_carga_escala FOREIGN KEY (ID_ESCALA) REFERENCES ESCALA_PORTUARIA(ID_ESCALA);
ALTER TABLE CONTENEDOR ADD CONSTRAINT fk_contenedor_carga FOREIGN KEY (ID_CARGA) REFERENCES CARGA(ID_CARGA);
ALTER TABLE CONTENEDOR ADD CONSTRAINT fk_contenedor_tipo FOREIGN KEY (ID_TIPO_CONTENEDOR) REFERENCES TIPO_CONTENEDOR(ID_TIPO_CONTENEDOR);
ALTER TABLE PETICION_SERVICIO ADD CONSTRAINT fk_pet_escala FOREIGN KEY (ID_ESCALA) REFERENCES ESCALA_PORTUARIA(ID_ESCALA);
ALTER TABLE PETICION_SERVICIO ADD CONSTRAINT fk_pet_servicio FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIO(ID_SERVICIO);
ALTER TABLE PETICION_SERVICIO ADD CONSTRAINT fk_pet_usuario FOREIGN KEY (ID_USUARIO_CAPITAN) REFERENCES USUARIOS(ID_USUARIO);
ALTER TABLE PETICION_SERVICIO ADD CONSTRAINT fk_pet_estado FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO_PETICION(ID_ESTADO);
ALTER TABLE FACTURA ADD CONSTRAINT fk_fact_escala FOREIGN KEY (ID_EScala) REFERENCES ESCALA_PORTUARIA(ID_ESCALA);
ALTER TABLE FACTURA ADD CONSTRAINT fk_fact_cliente FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE);
ALTER TABLE FACTURA ADD CONSTRAINT fk_fact_moneda FOREIGN KEY (ID_MONEDA) REFERENCES TIPO_MONEDA(ID_MONEDA);
ALTER TABLE SERVICIO_ESCALA ADD CONSTRAINT fk_se_escala_v2 FOREIGN KEY (ID_ESCALA) REFERENCES ESCALA_PORTUARIA(ID_ESCALA);
ALTER TABLE SERVICIO_ESCALA ADD CONSTRAINT fk_se_tarifa FOREIGN KEY (ID_TARIFA) REFERENCES TARIFA_SERVICIO(ID_TARIFA);
ALTER TABLE DETALLE_FACTURA ADD CONSTRAINT fk_detfact_factura FOREIGN KEY (ID_FACTURA) REFERENCES FACTURA(ID_FACTURA);
ALTER TABLE DETALLE_FACTURA ADD CONSTRAINT fk_detfact_servescala FOREIGN KEY (ID_SERVICIO_ESCALA) REFERENCES SERVICIO_ESCALA(ID_SERVICIO_ESCALA);
ALTER TABLE PAGO ADD CONSTRAINT fk_pago_factura FOREIGN KEY (ID_FACTURA) REFERENCES FACTURA(ID_FACTURA);
ALTER TABLE PAGO ADD CONSTRAINT fk_pago_metodo FOREIGN KEY (ID_METODO_PAGO) REFERENCES METODO_PAGO(ID_METODO_PAGO);
ALTER TABLE DOCUMENTO ADD CONSTRAINT fk_doc_escala FOREIGN KEY (ID_ESCALA) REFERENCES ESCALA_PORTUARIA(ID_ESCALA);
ALTER TABLE DOCUMENTO ADD CONSTRAINT fk_doc_tipo FOREIGN KEY (ID_TIPO_DOCUMENTO) REFERENCES TIPO_DOCUMENTO(ID_TIPO_DOCUMENTO);
ALTER TABLE PROVEEDOR_SERVICIO ADD CONSTRAINT fk_ps_proveedor FOREIGN KEY (ID_PROVEEDOR) REFERENCES PROVEEDOR(ID_PROVEEDOR);
ALTER TABLE PROVEEDOR_SERVICIO ADD CONSTRAINT fk_ps_servicio FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIO(ID_SERVICIO);
ALTER TABLE EMPLEADO_CLIENTE ADD CONSTRAINT fk_ec_empleado FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO);
ALTER TABLE EMPLEADO_CLIENTE ADD CONSTRAINT fk_ec_cliente FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE);

-- =======================================================================
-- Parte 6: Inserción de Datos de Catálogo y Usuarios de Prueba
-- =======================================================================
-- Usamos MERGE para insertar solo si no existen, haciéndolo seguro de ejecutar múltiples veces.
MERGE INTO ROLES r USING (SELECT 'administrador' AS N FROM DUAL) src ON (r.NOMBRE_ROL = src.N) WHEN NOT MATCHED THEN INSERT (NOMBRE_ROL) VALUES (src.N);
MERGE INTO ROLES r USING (SELECT 'capitan' AS N FROM DUAL) src ON (r.NOMBRE_ROL = src.N) WHEN NOT MATCHED THEN INSERT (NOMBRE_ROL) VALUES (src.N);
MERGE INTO ROLES r USING (SELECT 'operador' AS N FROM DUAL) src ON (r.NOMBRE_ROL = src.N) WHEN NOT MATCHED THEN INSERT (NOMBRE_ROL) VALUES (src.N);
MERGE INTO ROLES r USING (SELECT 'visitante' AS N FROM DUAL) src ON (r.NOMBRE_ROL = src.N) WHEN NOT MATCHED THEN INSERT (NOMBRE_ROL) VALUES (src.N);

MERGE INTO PAIS p USING (SELECT 'Panamá' AS N FROM DUAL) src ON (p.PAIS = src.N) WHEN NOT MATCHED THEN INSERT (PAIS) VALUES (src.N);
MERGE INTO PAIS p USING (SELECT 'Estados Unidos' AS N FROM DUAL) src ON (p.PAIS = src.N) WHEN NOT MATCHED THEN INSERT (PAIS) VALUES (src.N);
MERGE INTO PAIS p USING (SELECT 'España' AS N FROM DUAL) src ON (p.PAIS = src.N) WHEN NOT MATCHED THEN INSERT (PAIS) VALUES (src.N);

MERGE INTO TIPO_MONEDA tm USING (SELECT 'Dólar Estadounidense' AS N, 'USD' AS C FROM DUAL) src ON (tm.CODIGO_ISO = src.C) WHEN NOT MATCHED THEN INSERT (NOMBRE_MONEDA, CODIGO_ISO) VALUES (src.N, src.C);
MERGE INTO METODO_PAGO mp USING (SELECT 'Transferencia Bancaria' AS N FROM DUAL) src ON (mp.NOMBRE_METODO = src.N) WHEN NOT MATCHED THEN INSERT (NOMBRE_METODO) VALUES (src.N);

MERGE INTO TIPO_BARCO tb USING (SELECT 'Portacontenedores' AS N FROM DUAL) src ON (tb.TIPO_BARCO = src.N) WHEN NOT MATCHED THEN INSERT (TIPO_BARCO) VALUES (src.N);
MERGE INTO TIPO_BARCO tb USING (SELECT 'Buque Tanque' AS N FROM DUAL) src ON (tb.TIPO_BARCO = src.N) WHEN NOT MATCHED THEN INSERT (TIPO_BARCO) VALUES (src.N);

MERGE INTO CATEGORIA_SERVICIO cs USING (SELECT 'Servicios a la Nave' AS N FROM DUAL) src ON (cs.CATEGORIA = src.N) WHEN NOT MATCHED THEN INSERT (CATEGORIA) VALUES (src.N);
MERGE INTO CATEGORIA_SERVICIO cs USING (SELECT 'Servicios a la Carga' AS N FROM DUAL) src ON (cs.CATEGORIA = src.N) WHEN NOT MATCHED THEN INSERT (CATEGORIA) VALUES (src.N);

-- Contraseña para 'admin' es 'admin123', 'cpt.jones' es 'password123'
MERGE INTO USUARIOS u USING (SELECT 'admin' AS N, '$2a$10$abcdefghijklmnopqrstuvwxyz1234567890ABCDEFG' as P, 1 as R FROM DUAL) src ON (u.NOMBRE_USUARIO = src.N) WHEN NOT MATCHED THEN INSERT (NOMBRE_USUARIO, PASSWORD_HASH, ID_ROL) VALUES (src.N, src.P, src.R);
MERGE INTO USUARIOS u USING (SELECT 'cpt.jones' AS N, '$2a$10$hijklmnopqrstuvwxyz1234567890ABCDEFGHIJK' as P, 2 as R FROM DUAL) src ON (u.NOMBRE_USUARIO = src.N) WHEN NOT MATCHED THEN INSERT (NOMBRE_USUARIO, PASSWORD_HASH, ID_ROL) VALUES (src.N, src.P, src.R);

COMMIT;

SELECT 'Script v2.1 (Final) ejecutado exitosamente. La base de datos ha sido reestructurada.' AS ESTATUS FROM DUAL;



INSERT INTO ROLES (NOMBRE_ROL) VALUES ('administrador');
INSERT INTO ROLES (NOMBRE_ROL) VALUES ('capitan');
INSERT INTO ROLES (NOMBRE_ROL) VALUES ('operador');
INSERT INTO ROLES (NOMBRE_ROL) VALUES ('visitante');
INSERT INTO PAIS (PAIS) VALUES ('Panamá');
INSERT INTO PAIS (PAIS) VALUES ('Estados Unidos');
INSERT INTO PAIS (PAIS) VALUES ('España');
INSERT INTO TIPO_MONEDA (NOMBRE_MONEDA, CODIGO_ISO) VALUES ('Dólar Estadounidense', 'USD');
INSERT INTO METODO_PAGO (NOMBRE_METODO) VALUES ('Transferencia Bancaria');
INSERT INTO TIPO_BARCO (TIPO_BARCO) VALUES ('Portacontenedores');
INSERT INTO TIPO_BARCO (TIPO_BARCO) VALUES ('Buque Tanque');
INSERT INTO CATEGORIA_SERVICIO (CATEGORIA) VALUES ('Servicios a la Nave');
INSERT INTO CATEGORIA_SERVICIO (CATEGORIA) VALUES ('Servicios a la Carga');
COMMIT;
/

SELECT 'Script v2.1 (Final) ejecutado exitosamente por partes.' AS ESTATUS FROM DUAL;


-- =======================================================================
-- SCRIPT PARA CREAR LOS PROCEDIMIENTOS ALMACENADOS DE NVDPA
-- =======================================================================

-- Procedimiento para CREAR un nuevo barco
CREATE OR REPLACE PROCEDURE CREAR_BARCO (
    p_nombre         IN VARCHAR2,
    p_numero_imo     IN VARCHAR2,
    p_id_tipo_barco  IN NUMBER,
    p_id_pais_bandera IN NUMBER,
    p_id_cliente     IN NUMBER
)
AS
BEGIN
    INSERT INTO BARCO (nombre_barco, numero_imo, id_tipo_barco, id_pais_bandera, id_cliente)
    VALUES (p_nombre, p_numero_imo, p_id_tipo_barco, p_id_pais_bandera, p_id_cliente);
    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RAISE_APPLICATION_ERROR(-20010, 'El número IMO ' || p_numero_imo || ' ya existe.');
    WHEN OTHERS THEN
        RAISE;
END;
/

-- Procedimiento para ACTUALIZAR un barco existente
CREATE OR REPLACE PROCEDURE ACTUALIZAR_BARCO (
    p_id_barco       IN NUMBER,
    p_nombre_barco   IN VARCHAR2,
    p_id_tipo_barco  IN NUMBER,
    p_id_pais_bandera IN NUMBER,
    p_id_cliente     IN NUMBER
)
AS
BEGIN
    UPDATE BARCO
    SET 
        nombre_barco = p_nombre_barco,
        id_tipo_barco = p_id_tipo_barco,
        id_pais_bandera = p_id_pais_bandera,
        id_cliente = p_id_cliente
    WHERE id_barco = p_id_barco;
    
    IF SQL%NOTFOUND THEN
        RAISE_APPLICATION_ERROR(-20011, 'El barco con ID ' || p_id_barco || ' no existe.');
    END IF;
    COMMIT;
END;
/

-- Procedimiento para ELIMINAR un barco
CREATE OR REPLACE PROCEDURE ELIMINAR_BARCO (
    p_id_barco IN NUMBER
)
AS
    v_count_escalas NUMBER;
BEGIN
    -- Verificación: no se puede borrar un barco si tiene escalas asociadas.
    SELECT COUNT(*) INTO v_count_escalas FROM ESCALA_PORTUARIA WHERE id_barco = p_id_barco;
    
    IF v_count_escalas > 0 THEN
        RAISE_APPLICATION_ERROR(-20012, 'No se puede eliminar el barco porque tiene escalas portuarias registradas.');
    END IF;
    
    -- También borramos la tripulación asociada antes de borrar el barco
    DELETE FROM TRIPULACION WHERE id_barco = p_id_barco;
    
    DELETE FROM BARCO WHERE id_barco = p_id_barco;
    
    IF SQL%NOTFOUND THEN
        RAISE_APPLICATION_ERROR(-20011, 'El barco con ID ' || p_id_barco || ' no existe.');
    END IF;
    COMMIT;
END;
/

-- Procedimiento para OBTENER los detalles completos de un barco
CREATE OR REPLACE PROCEDURE GET_BARCO_DETALLES (
    p_barco_id            IN  NUMBER,
    c_detalles            OUT SYS_REFCURSOR,
    c_tripulacion         OUT SYS_REFCURSOR,
    c_historial_escalas   OUT SYS_REFCURSOR
)
AS
BEGIN
    -- Cursor 1: Detalles del barco
    OPEN c_detalles FOR
        SELECT b.id_barco, b.nombre_barco, b.numero_imo, tb.tipo_barco, p.pais AS pais_bandera
        FROM barco b
        LEFT JOIN tipo_barco tb ON b.id_tipo_barco = tb.id_tipo_barco
        LEFT JOIN pais p ON b.id_pais_bandera = p.id_pais
        WHERE b.id_barco = p_barco_id;

    -- Cursor 2: Tripulación del barco
    OPEN c_tripulacion FOR
        SELECT t.id_tripulacion, t.nombre_completo, t.rol_abordo, p.pais AS nacionalidad
        FROM tripulacion t
        LEFT JOIN pais p ON t.id_pais_nacionalidad = p.id_pais
        WHERE t.id_barco = p_barco_id;

    -- Cursor 3: Historial de escalas
    OPEN c_historial_escalas FOR
        SELECT e.id_escala, p.nombre_puerto, e.fecha_llegada, e.fecha_salida
        FROM escala_portuaria e
        JOIN puerto p ON e.id_puerto = p.id_puerto
        WHERE e.id_barco = p_barco_id
        ORDER BY e.fecha_llegada DESC;
END;
/


-- Procedimiento para que un Capitán registre su barco y se autoasigne
CREATE OR REPLACE PROCEDURE REGISTRAR_BARCO_Y_ASIGNAR_CAPITAN (
    p_nombre_barco      IN VARCHAR2,
    p_numero_imo        IN VARCHAR2,
    p_id_tipo_barco     IN NUMBER,
    p_id_pais_bandera   IN NUMBER,
    p_id_cliente        IN NUMBER,
    p_id_usuario_capitan IN NUMBER,
    p_id_nuevo_barco    OUT NUMBER
)
AS
BEGIN
    -- Insertamos el nuevo barco y obtenemos su ID recién creado
    INSERT INTO BARCO (nombre_barco, numero_imo, id_tipo_barco, id_pais_bandera, id_cliente)
    VALUES (p_nombre_barco, p_numero_imo, p_id_tipo_barco, p_id_pais_bandera, p_id_cliente)
    RETURNING id_barco INTO p_id_nuevo_barco;
    
    -- Actualizamos la tabla USUARIOS para asignar el nuevo BarcoID al capitán.
    -- (NOTA: Esta lógica se ha movido al API para mayor flexibilidad, pero el procedimiento
    -- podría hacerlo si la lógica de negocio lo requiere así).

    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RAISE_APPLICATION_ERROR(-20010, 'El número IMO ' || p_numero_imo || ' ya existe.');
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

SELECT 'Todos los procedimientos necesarios han sido creados o actualizados.' AS ESTATUS FROM DUAL;


UPDATE USUARIOS
SET PASSWORD_HASH = '$2b$10$wT5v2L5.aG2zSQLy64CVA.i91hFGLsXg3voACpS3y5k2B6r6qGyOq'
WHERE NOMBRE_USUARIO = 'admin';

COMMIT;