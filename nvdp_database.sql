-- =================================================================================================
-- SCRIPT MAESTRO PARA LA CREACIÓN Y POBLACIÓN DE LA BASE DE DATOS NVDPA v2.0
-- =================================================================================================

-- Fecha: 03 de Julio de 2025
-- Versión: 2.0
--
-- Descripción:
-- Este script construye el esquema completo para la aplicación NVDPA. Es idempotente, lo que
-- significa que puede ser ejecutado múltiples veces sin generar errores. Se encarga de:
-- 1. Borrar todas las tablas existentes en el orden de dependencia correcto.
-- 2. Crear el esquema de tablas siguiendo las convenciones de nombrado y buenas prácticas.
-- 3. Insertar datos iniciales y de catálogo para el funcionamiento básico de la aplicación.
-- =================================================================================================


-- =================================================================================================
-- PARTE 1: BORRADO SEGURO DE TABLAS EXISTENTES
-- =================================================================================================
-- Este bloque PL/SQL itera sobre una lista de tablas y las borra.
-- Es más mantenible que múltiples sentencias 'EXECUTE IMMEDIATE'.
-- El orden es inverso al de la creación para respetar las dependencias.
-- =================================================================================================
BEGIN
    FOR t IN (
        SELECT 'cliente_operaciones' AS table_name FROM dual UNION ALL
        SELECT 'proveedor_servicio' AS table_name FROM dual UNION ALL
        SELECT 'peticion_servicio' AS table_name FROM dual UNION ALL
        SELECT 'servicio_escala' AS table_name FROM dual UNION ALL
        SELECT 'transaccion' AS table_name FROM dual UNION ALL
        SELECT 'carga' AS table_name FROM dual UNION ALL
        SELECT 'escala_portuaria' AS table_name FROM dual UNION ALL
        SELECT 'tripulacion' AS table_name FROM dual UNION ALL
        SELECT 'empleado' AS table_name FROM dual UNION ALL
        SELECT 'usuario' AS table_name FROM dual UNION ALL
        SELECT 'rol' AS table_name FROM dual UNION ALL
        SELECT 'empresa_proveedora' AS table_name FROM dual UNION ALL
        SELECT 'servicio' AS table_name FROM dual UNION ALL
        SELECT 'tipo_servicio' AS table_name FROM dual UNION ALL
        SELECT 'barco' AS table_name FROM dual UNION ALL
        SELECT 'tipo_barco' AS table_name FROM dual UNION ALL
        SELECT 'puerto' AS table_name FROM dual UNION ALL
        SELECT 'cliente' AS table_name FROM dual UNION ALL
        SELECT 'pais' AS table_name FROM dual UNION ALL
        SELECT 'departamento' AS table_name FROM dual UNION ALL
        SELECT 'cargo' AS table_name FROM dual UNION ALL
        SELECT 'tipo_moneda' AS table_name FROM dual UNION ALL
        SELECT 'metodo_pago' AS table_name FROM dual
    ) LOOP
        BEGIN
            EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS';
            DBMS_OUTPUT.PUT_LINE('Tabla ' || t.table_name || ' eliminada.');
        EXCEPTION
            WHEN OTHERS THEN
                IF SQLCODE = -942 THEN
                    DBMS_OUTPUT.PUT_LINE('Tabla ' || t.table_name || ' no existía, se ignora.');
                ELSE
                    RAISE;
                END IF;
        END;
    END LOOP;
END;
/


-- =================================================================================================
-- PARTE 2: CREACIÓN DE TABLAS DE CATÁLOGO (LOOKUP TABLES)
-- =================================================================================================
-- Estas tablas contienen datos de referencia que raramente cambian.
-- No tienen dependencias externas.
-- =================================================================================================
CREATE TABLE pais (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL UNIQUE
);

CREATE TABLE tipo_barco (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL UNIQUE
);

CREATE TABLE tipo_servicio (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL UNIQUE -- Columna añadida para dar sentido a la tabla
);

CREATE TABLE departamento (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL UNIQUE
);

CREATE TABLE cargo (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL UNIQUE
);

CREATE TABLE tipo_moneda (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(50)    NOT NULL UNIQUE,
    codigo_iso      VARCHAR2(3)     NOT NULL UNIQUE
);

CREATE TABLE metodo_pago (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL UNIQUE
);

CREATE TABLE empresa_proveedora (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_empresa  VARCHAR2(150)   NOT NULL UNIQUE,
    ruc             VARCHAR2(20)    UNIQUE,
    telefono        VARCHAR2(50),
    email           VARCHAR2(100)
);

CREATE TABLE rol (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_rol      VARCHAR2(50)    NOT NULL UNIQUE
);


-- =================================================================================================
-- PARTE 3: CREACIÓN DE TABLAS DE ENTIDADES PRINCIPALES
-- =================================================================================================
-- Representan los objetos centrales del negocio.
-- =================================================================================================
CREATE TABLE cliente (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL,
    direccion       VARCHAR2(255),
    info_contacto   VARCHAR2(100)
);

CREATE TABLE puerto (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL,
    id_pais         NUMBER,
    latitud         NUMBER,
    longitud        NUMBER,
    -- Constraints
    CONSTRAINT      fk_puerto_pais  FOREIGN KEY (id_pais) REFERENCES pais(id)
);

CREATE TABLE barco (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL,
    numero_imo      VARCHAR2(7)     NOT NULL UNIQUE,
    id_tipo_barco   NUMBER,
    id_pais_bandera NUMBER,
    id_cliente      NUMBER,
    -- Constraints
    CONSTRAINT      fk_barco_tipobarco      FOREIGN KEY (id_tipo_barco) REFERENCES tipo_barco(id),
    CONSTRAINT      fk_barco_paisbandera    FOREIGN KEY (id_pais_bandera) REFERENCES pais(id),
    CONSTRAINT      fk_barco_cliente        FOREIGN KEY (id_cliente) REFERENCES cliente(id)
);

CREATE TABLE servicio (
    id                  NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre              VARCHAR2(100)   NOT NULL,
    descripcion         VARCHAR2(255),
    id_tipo_servicio    NUMBER,
    -- Constraints
    CONSTRAINT          fk_servicio_tiposervicio FOREIGN KEY (id_tipo_servicio) REFERENCES tipo_servicio(id)
);

CREATE TABLE usuario (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100)   NOT NULL UNIQUE,
    password_hash   VARCHAR2(60)    NOT NULL, -- Renombrada para indicar que es un hash
    id_rol          NUMBER          NOT NULL,
    id_barco        NUMBER,
    -- Constraints
    CONSTRAINT      fk_usuario_rol      FOREIGN KEY (id_rol) REFERENCES rol(id),
    CONSTRAINT      fk_usuario_barco    FOREIGN KEY (id_barco) REFERENCES barco(id)
);

CREATE TABLE empleado (
    id                  NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre              VARCHAR2(100)   NOT NULL,
    apellido            VARCHAR2(100)   NOT NULL,
    cedula              VARCHAR2(20)    NOT NULL UNIQUE,
    id_usuario          NUMBER          UNIQUE,
    id_cargo            NUMBER,
    id_departamento     NUMBER,
    -- Constraints
    CONSTRAINT      fk_empleado_cargo           FOREIGN KEY (id_cargo) REFERENCES cargo(id),
    CONSTRAINT      fk_empleado_departamento    FOREIGN KEY (id_departamento) REFERENCES departamento(id),
    CONSTRAINT      fk_empleado_usuario         FOREIGN KEY (id_usuario) REFERENCES usuario(id)
);

CREATE TABLE tripulacion (
    id                      NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre                  VARCHAR2(150)   NOT NULL,
    rol                     VARCHAR2(50),
    numero_pasaporte        VARCHAR2(50)    NOT NULL UNIQUE,
    id_pais_nacionalidad    NUMBER,
    id_barco                NUMBER,
    -- Constraints
    CONSTRAINT      fk_tripulacion_pais     FOREIGN KEY (id_pais_nacionalidad) REFERENCES pais(id),
    CONSTRAINT      fk_tripulacion_barco    FOREIGN KEY (id_barco) REFERENCES barco(id)
);


-- =================================================================================================
-- PARTE 4: CREACIÓN DE TABLAS TRANSACCIONALES Y DE UNIÓN
-- =================================================================================================
-- Estas tablas registran eventos o relacionan otras tablas entre sí.
-- =================================================================================================
CREATE TABLE escala_portuaria (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_barco        NUMBER          NOT NULL,
    id_puerto       NUMBER          NOT NULL,
    fecha_llegada   TIMESTAMP,
    fecha_salida    TIMESTAMP,
    muelle          VARCHAR2(20),
    -- Constraints
    CONSTRAINT      fk_escala_barco     FOREIGN KEY (id_barco) REFERENCES barco(id),
    CONSTRAINT      fk_escala_puerto    FOREIGN KEY (id_puerto) REFERENCES puerto(id),
    CONSTRAINT      chk_fechas_escala   CHECK (fecha_salida > fecha_llegada)
);

CREATE TABLE carga (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_escala       NUMBER          NOT NULL,
    tipo            VARCHAR2(100),
    cantidad        NUMBER,
    peso_toneladas  NUMBER(10, 3), -- Nombre más descriptivo
    origen          VARCHAR2(100),
    destino         VARCHAR2(100),
    -- Constraints
    CONSTRAINT      fk_carga_escala     FOREIGN KEY (id_escala) REFERENCES escala_portuaria(id)
);

CREATE TABLE transaccion (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_escala       NUMBER          NOT NULL,
    id_cliente      NUMBER          NOT NULL,
    monto           NUMBER(12, 2)   NOT NULL,
    id_moneda       NUMBER,
    id_metodo_pago  NUMBER,
    fecha_pago      DATE            DEFAULT SYSDATE,
    estado_pago     VARCHAR2(20)    DEFAULT 'Pendiente' CHECK (estado_pago IN ('Pendiente', 'Pagado', 'Cancelado')),
    -- Constraints
    CONSTRAINT      fk_transaccion_escala       FOREIGN KEY (id_escala) REFERENCES escala_portuaria(id),
    CONSTRAINT      fk_transaccion_cliente      FOREIGN KEY (id_cliente) REFERENCES cliente(id),
    CONSTRAINT      fk_transaccion_moneda       FOREIGN KEY (id_moneda) REFERENCES tipo_moneda(id),
    CONSTRAINT      fk_transaccion_metodopago   FOREIGN KEY (id_metodo_pago) REFERENCES metodo_pago(id)
);

CREATE TABLE peticion_servicio (
    id                  NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_escala_portuaria NUMBER          NOT NULL,
    id_servicio         NUMBER          NOT NULL,
    id_usuario          NUMBER          NOT NULL,
    estado              VARCHAR2(50)    DEFAULT 'Pendiente',
    fecha_peticion      DATE            DEFAULT SYSDATE,
    notas               VARCHAR2(500),
    -- Constraints
    CONSTRAINT      fk_peticion_escala      FOREIGN KEY (id_escala_portuaria) REFERENCES escala_portuaria(id),
    CONSTRAINT      fk_peticion_servicio    FOREIGN KEY (id_servicio) REFERENCES servicio(id),
    CONSTRAINT      fk_peticion_usuario     FOREIGN KEY (id_usuario) REFERENCES usuario(id)
);

-- Tablas de Unión (Many-to-Many)
CREATE TABLE servicio_escala (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_escala       NUMBER          NOT NULL,
    id_servicio     NUMBER          NOT NULL,
    id_proveedor    NUMBER,
    costo           NUMBER(10, 2)   DEFAULT 0.00,
    notas_proveedor VARCHAR2(255),
    -- Constraints
    CONSTRAINT      fk_se_escala        FOREIGN KEY (id_escala) REFERENCES escala_portuaria(id),
    CONSTRAINT      fk_se_servicio      FOREIGN KEY (id_servicio) REFERENCES servicio(id),
    CONSTRAINT      fk_se_proveedor     FOREIGN KEY (id_proveedor) REFERENCES empresa_proveedora(id)
);

CREATE TABLE proveedor_servicio (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_proveedor    NUMBER          NOT NULL,
    id_servicio     NUMBER          NOT NULL,
    -- Constraints
    CONSTRAINT      fk_ps_proveedor     FOREIGN KEY (id_proveedor) REFERENCES empresa_proveedora(id),
    CONSTRAINT      fk_ps_servicio      FOREIGN KEY (id_servicio) REFERENCES servicio(id),
    CONSTRAINT      uq_proveedor_servicio UNIQUE (id_proveedor, id_servicio)
);

CREATE TABLE cliente_operaciones (
    id              NUMBER          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_empleado     NUMBER          NOT NULL,
    id_cliente      NUMBER          NOT NULL,
    -- Constraints
    CONSTRAINT      fk_co_empleado      FOREIGN KEY (id_empleado) REFERENCES empleado(id),
    CONSTRAINT      fk_co_cliente       FOREIGN KEY (id_cliente) REFERENCES cliente(id),
    CONSTRAINT      uq_co_asignacion    UNIQUE (id_empleado, id_cliente)
);
COMMIT;

-- =================================================================================================
-- PARTE 5: INSERCIÓN DE DATOS INICIALES (SEEDING)
-- =================================================================================================
BEGIN
    -- Insertar roles
    INSERT INTO rol (nombre_rol) VALUES ('administrador');
    INSERT INTO rol (nombre_rol) VALUES ('visitante');
    INSERT INTO rol (nombre_rol) VALUES ('capitan');
    INSERT INTO rol (nombre_rol) VALUES ('operador');

    -- Insertar monedas
    INSERT INTO tipo_moneda (nombre, codigo_iso) VALUES ('Dólar Estadounidense', 'USD');
    INSERT INTO tipo_moneda (nombre, codigo_iso) VALUES ('Euro', 'EUR');

    -- Insertar métodos de pago
    INSERT INTO metodo_pago (nombre) VALUES ('Transferencia Bancaria');
    INSERT INTO metodo_pago (nombre) VALUES ('Tarjeta de Crédito');
    INSERT INTO metodo_pago (nombre) VALUES ('Efectivo');

    -- Insertar Paises
    INSERT INTO pais (nombre) VALUES ('Panamá');
    INSERT INTO pais (nombre) VALUES ('España');
    INSERT INTO pais (nombre) VALUES ('Liberia');
    INSERT INTO pais (nombre) VALUES ('Singapur');
    INSERT INTO pais (nombre) VALUES ('Países Bajos');
    INSERT INTO pais (nombre) VALUES ('Colombia');
    INSERT INTO pais (nombre) VALUES ('Venezuela');

    -- Crear usuario 'admin' de prueba.
    -- IMPORTANTE: El hash de la contraseña es un ejemplo y no es seguro.
    -- Corresponde a la contraseña 'admin123'. Debe ser reemplazado por un hash generado
    -- de forma segura en la aplicación antes de pasar a producción.
    MERGE INTO usuario u
    USING (SELECT 'admin' AS nombre FROM dual) src
    ON (u.nombre = src.nombre)
    WHEN MATCHED THEN
      UPDATE SET u.password_hash = '$2a$10$abcdefghijklmnopqrstuvwxyz1234567890ABCDEFG', u.id_rol = 1
    WHEN NOT MATCHED THEN
      INSERT (nombre, password_hash, id_rol)
      VALUES ('admin', '$2a$10$abcdefghijklmnopqrstuvwxyz1234567890ABCDEFG', 1);

END;
/
COMMIT;

-- =================================================================================================
-- FIN DEL SCRIPT
-- =================================================================================================